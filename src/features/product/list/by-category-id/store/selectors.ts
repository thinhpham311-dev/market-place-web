import { createSelector } from "@reduxjs/toolkit";
import { RootState } from "@/store";

// 1. Factory t·∫°o selector d·ª±a v√†o storeKey
export const makeSelectProByCategoryIdState = (storeKey: string) => {
    console.log("üîÅ Creating selector for:", storeKey); // log khi selector m·ªõi ƒë∆∞·ª£c t·∫°o
    return createSelector(
        (state: RootState) => state[storeKey]?.data ?? null,
        (data) => ({
            products: data?.list ?? [],
            loading: data?.loading ?? false,
            totalItems: data?.total ?? 0,
            error: data?.error ?? null,
        })
    );
};


// 2. Cache selector theo storeKey + gi·ªõi h·∫°n k√≠ch th∆∞·ªõc cache
const MAX_CACHE_SIZE = 100;
const proByCategoryIdSelectorsCache: Record<string, ReturnType<typeof makeSelectProByCategoryIdState>> = {};
const cacheKeys: string[] = [];

/**
 * L·∫•y selector ƒë√£ cache theo storeKey ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a c√≥.
 * T·ª± ƒë·ªông gi·ªõi h·∫°n cache t·ªëi ƒëa MAX_CACHE_SIZE selector.
 */
export const selectProByCategoryIdByStoreKey = (storeKey: string) => {
    if (!proByCategoryIdSelectorsCache[storeKey]) {
        // T·∫°o selector m·ªõi v√† l∆∞u v√†o cache
        proByCategoryIdSelectorsCache[storeKey] = makeSelectProByCategoryIdState(storeKey);
        cacheKeys.push(storeKey);

        // Xo√° cache c≈© n·∫øu qu√° gi·ªõi h·∫°n
        if (cacheKeys.length > MAX_CACHE_SIZE) {
            const oldestKey = cacheKeys.shift();
            if (oldestKey) {
                delete proByCategoryIdSelectorsCache[oldestKey];
            }
        }
    }

    return proByCategoryIdSelectorsCache[storeKey];
};
